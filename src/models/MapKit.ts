/**
 * This file was auto-generated by openapi-typescript.
 * Do not make direct changes to the file.
 */

export interface paths {
  "/v1/token": {
    /** Returns a JWT maps access token that you use to call the service API. */
    get: operations["getToken"];
  };
  "/v1/geocode": {
    /** Returns the latitude and longitude of the address you specify. */
    get: operations["getGeocode"];
  };
  "/v1/reverseGeocode": {
    /** Returns an array of addresses present at the coordinates you provide. */
    get: operations["getReverseGeocode"];
  };
}

export interface components {
  schemas: {
    /** @description An object that contains an access token and an expiration time in seconds. */
    TokenResponse: {
      /** @description A string that represents the access token. */
      accessToken: string;
      /** @description An integer that indicates the time, in seconds from now until the token expires. */
      expiresInSeconds: number;
    };
    /** @description An object that describes a map region in terms of its upper-right and lower-left corners as a pair of geographic points. */
    MapRegion: {
      /** @description A double value that describes the east longitude of the map region. */
      eastLongitude: number;
      /** @description A double value that describes the north latitude of the map region. */
      northLatitude: number;
      /** @description A double value that describes the south latitude of the map region. */
      southLatitude: number;
      /** @description A double value that describes west longitude of the map region. */
      westLongitude: number;
    };
    /** @description An object that describes a location in terms of its longitude and latitude. */
    Location: {
      /** @description A double value that describes the latitude of the coordinate. */
      latitude: number;
      /** @description A double value that describes the longitude of the coordinate. */
      longitude: number;
    };
    /** @description An object that describes the detailed address components of a place. */
    StructuredAddress: {
      /** @description The state or province of the place. */
      administrativeArea: string;
      /** @description The short code for the state or area. */
      administrativeAreaCode?: string;
      /** @description Common names of the area in which the place resides. */
      areasOfInterest?: string[];
      /** @description Common names for the local area or neighborhood of the place. */
      dependentLocalities?: string[];
      /** @description A combination of thoroughfare and subthoroughfare. */
      fullThoroughfare?: string;
      /** @description The city of the place. */
      locality: string;
      /** @description The postal code of the place. */
      postCode?: string;
      /** @description The name of the area within the locality. */
      subLocality?: string;
      /** @description The number on the street at the place. */
      subThoroughfare?: string;
      /** @description The street name at the place. */
      thoroughfare?: string;
    };
    /** @description An object that describes a place in terms of a variety of spatial, administrative, and qualitative properties. */
    Place: {
      /** @description The country or region of the place. */
      country: string;
      /** @description The 2-letter country code of the place. */
      countryCode: string;
      /** @description The geographic region associated with the place. */
      displayMapRegion: components["schemas"]["MapRegion"];
      /** @description The address of the place, formatted using its conventions of its country or region. */
      formattedAddressLines: string[];
      /** @description A place name that you can use for display purposes. */
      name: string;
      /** @description The latitude and longitude of this place. */
      coordinate: components["schemas"]["Location"];
      /** @description A StructuredAddress object that describes details of the place’s address. */
      structuredAddress: components["schemas"]["StructuredAddress"];
    };
    /** @description An object that contains an array of places. */
    PlaceResults: {
      /** @description An array of one or more Place objects. */
      results: components["schemas"]["Place"][];
    };
  };
}

export interface operations {
  /** Returns a JWT maps access token that you use to call the service API. */
  getToken: {
    responses: {
      /** A response that indicates the authorization request is successful. The dictionary that accompanies the response contains a maps access token and an integer that indicates the time in seconds until the token expires. */
      200: {
        content: {
          "application/json": components["schemas"]["TokenResponse"];
        };
      };
      /** An error response that indicates the maps token is missing or invalid. The dictionary that accompanies the error may contain additional details about the error. */
      401: unknown;
    };
  };
  /** Returns the latitude and longitude of the address you specify. */
  getGeocode: {
    parameters: {
      query: {
        /** The address to geocode. For example: q=1 Apple Park, Cupertino, CA */
        q: string;
        /** A comma-separated list of countries (using country codes) to limit the results to. For example: limitToCountries=US,CA. */
        limitToCountries?: string;
        /** The language the server should use when returning the response, specified using a BCP 47 language code. For example, for English use lang=en-US. Default: en-US */
        lang?: string;
        /** A location defined by the application as a hint. Specify the location as a comma-separated string containing the latitude and longitude. For example, searchLocation=37.78,-122.42. */
        searchLocation?: string;
        /** A region the app defines as a hint. Specify the region specified as a comma-separated string that describes the region in the form north-latitude,east-longitude,south-latitude,west-longitude. For example, searchRegion=38,-122.1,37.5,-122.5. */
        searchRegion?: string;
        /** The location of the user, specified as a comma-separated string that contains the latitude and longitude. For example: userLocation=37.78,-122.42. */
        userLocation?: string;
      };
    };
    responses: {
      /** The request is successful. The data sets are in the response. */
      200: {
        content: {
          "application/json": components["schemas"]["PlaceResults"];
        };
      };
      /** The server is unable to process the request due to an invalid parameter value. */
      400: unknown;
      /** The request isn’t authorized or doesn’t include the correct authentication information. */
      401: unknown;
    };
  };
  /** Returns an array of addresses present at the coordinates you provide. */
  getReverseGeocode: {
    parameters: {
      query: {
        /** The coordinate to reverse geocode as a comma-separated string that contains the latitude and longitude. For example: loc=37.3316851,-122.0300674. */
        loc: string;
        /** The language the server should use when returning the response, specified using a BCP 47 language code. For example, for English use lang=en-US. Default: en-US */
        lang?: string;
      };
    };
    responses: {
      /** The request is successful. The data sets are in the response. */
      200: {
        content: {
          "application/json": components["schemas"]["PlaceResults"];
        };
      };
      /** The server is unable to process the request due to an invalid parameter value. */
      400: unknown;
      /** The request isn’t authorized or doesn’t include the correct authentication information. */
      401: unknown;
    };
  };
}

export interface external {}
